/*Практикум по формальным языкам.
Задание 9: Дан язык, заданный регулярным выражением и слово из алфавита {a,b,c}.
Проверить, содержит ли язык данное слово.
*/


#include <iostream>
#include <string>
#include <set>
#include <vector>
using namespace std;
string YC("YOUCANSKIPIT");
string YR("YOUCANRETURN");
int ifAns = 0;

string ParseStupid(string regularExp)
//Рудимент, переводящий обратную польскую запись в традиционное регулярное выражение. Оставлен для пущего понимания схемы выражения. 
{
	vector<string> myStack;
	for (int i = 0; i < regularExp.length(); i++)
	{
		if (regularExp[i] == '.')
		{
			myStack[myStack.size() - 2] = myStack[myStack.size() - 2] + myStack[myStack.size() - 1];
			myStack.pop_back();
		}
		else
		if (regularExp[i] == '+')
		{

			myStack[myStack.size() - 2] = myStack[myStack.size() - 2] + "+" + myStack[myStack.size() - 1];
			myStack.pop_back();
		}
		else
		if (regularExp[i] == '*')
			myStack[myStack.size() - 1] = "(" + myStack[myStack.size() - 1] + ")*";
		else
		{
			string a = "0";
			a[0] = regularExp[i];
			//vector<string> t;
			//t.push_back(a);
			myStack.push_back(a);
		}
		return(myStack[0]);
	};
}

vector<vector<string>> ParseSmart(string regularExp)
//Метод, разбирающий регулярное выражение и выкатывающий двумерный вектор строк для дальнейшего разбора
{
	vector<vector<string>> ourStack;
	for (int i = 0; i < regularExp.length(); i++)
	{
		if ((regularExp[i] >= 'a') && (regularExp[i] <= 'd'))
		{
			vector<string> ti;
			string a = "0";
			a[0] = regularExp[i];
			ti.push_back(a);
			ourStack.push_back(ti);
		}
		else
		if (regularExp[i] == '1')
		{
			vector<string> ti;
			string a = "";
			a[0] = regularExp[i];
			ti.push_back(a);
			ourStack.push_back(ti);
		}
		// Для всякой следующей буквы из алфавита заводится вектор строк в порядке их использования в выражении.
		// Для '1' задаётся вектор пустой строки. 
		else
		if ((regularExp[i] == '.') && ((regularExp[i - 1] >= 'a') && (regularExp[i - 1] <= 'd')) && ((regularExp[i - 2] >= 'a') && (regularExp[i - 2] <= 'd'))) 
		{
			for (int j = 0; j < ourStack[ourStack.size() - 1].size(); j++)
			for (int q = 0; q < ourStack[ourStack.size() - 2].size(); q++)
				ourStack[ourStack.size() - 2][q] += ourStack[ourStack.size() - 1][j];
			ourStack.pop_back();
		}
		// Для двух букв из алфавита в выражении подряд выполняется конкатенация внутри одной строки
		// Варианты '*.', '+.' не конкатенируют векторы, а просто оставляют их в текущей последовательности.
		else
		if ((regularExp[i] == '.'))
		{
		}
		else
		if (regularExp[i] == '+')
		{
			for (int i = 0; i < ourStack[ourStack.size() - 1].size(); i++)
				ourStack[ourStack.size() - 2].push_back(ourStack[ourStack.size() - 1][i]);
			ourStack.pop_back();
		}
		// Для оператора '+' выполняется конкатенация двух последних векторов
		else
		if (regularExp[i] == '*')
			if (regularExp[i - 1] != '*')
			{
			int q = 1;
			string a("0");
			int hm = i-1;
			while ((regularExp[hm] == '.') && (hm >= 0))
			{
				q++;
				hm--;
			}
			for (int i = 0; i < ourStack[ourStack.size() - q].size();i++)
			if (ourStack[ourStack.size() - q][i] == "")
				ourStack[ourStack.size() - q][i] = "no";
			ourStack[ourStack.size() - q].push_back(YC);
			a[0] = '0' + q + 1;
			ourStack[ourStack.size() - q].push_back(a);
			a[0] = '0' + q;
			vector<string> ti;
			ti.push_back(YR);
			ti.push_back(a);
			ourStack.push_back(ti);
			}
			else {}
		//Для оператора '*' по последнему вектору ставится маркер, который позже используется при разборе и количество символов, которое определяется длиной скобки, по которой стоит *
		else
		{
			cout << "Wrong input";
			vector<vector<string>> nul;
			return(nul);
			//Выводим ошибку, создавая фиктивный пустой вектор и возвращаем его, чтобы при дальнейшем разборе не удалось получить результатов
		}
	}
	return(ourStack);
	//Собственно, возвращаем вектор с разобранным выражением
}

int JustDoIt(vector<vector<string>>& ourStack, string ourWord, int stackPos, int wordPos)
//Рекурсивная функция, разбирающая выражение посимвольно и проходящая по всему недетерменированному автомату. Если успех был достигнут хоть раз -- он выносится в ответ
{
	if (ifAns >= 1)
		return(0);
	if ((stackPos == ourStack.size()) && (wordPos == ourWord.length()))
		return(1);
	if ((stackPos >= ourStack.size()) || (wordPos > ourWord.length()))
		return(0);

	int ifstar = 0;
	if (ourStack[stackPos].size() >= 3)
	if (ourStack[stackPos][ourStack[stackPos].size() - 2].compare(YC) == 0)
		ifstar = 1;
	//т.н. Маркер звёздочки. Показывает, что данное состояние содержит пустой переход и некий цикл.
	for (int i = 0; i < ourStack[stackPos].size(); i++)
	{
		//Переносит область работы на длину цикла по звезде(то, что можно не использовать в слове), запуская рекурсию
		if (ourStack[stackPos][i].compare(YR) == 0)
		{
			ifAns += JustDoIt(ourStack, ourWord, stackPos - (ourStack[stackPos][i + 1][0] - '0'), wordPos);
		}
		else
		if (ourStack[stackPos][i].compare(YC) == 0)
		{
			ifAns += JustDoIt(ourStack, ourWord, stackPos + (ourStack[stackPos][i + 1][0] - '0'), wordPos);
		}
		else
		if (ourStack[stackPos][i].length() <= ourWord.length() - wordPos)
		{
			int co = 0;
			int j = 0;
			while (j < ourStack[stackPos][i].length())
			{
				if (ourStack[stackPos][i][j] != ourWord[wordPos + j])
					co = 1;
				j++;
			}
			if (co == 0)
			{
				//Ошибка с зацикленностью, в общем, тут была. Когда символ "1" стоял под "*", он зацикливался, постоянно пропускаясь
				//И запуская цикл с той же позицией слова и стека. Запретили.
				ifAns += JustDoIt(ourStack, ourWord, stackPos + 1, wordPos + ourStack[stackPos][i].length());
				if ((ifstar == 1) && (ourStack[stackPos][i].length() != 0))
					ifAns += JustDoIt(ourStack, ourWord, stackPos, wordPos + ourStack[stackPos][i].length());
			}
		}
		//Соответственно, проверяет для всех вариантов из вектора, можно ли пройти по "ребру", который те задают. Если имелась звёздочка-- запускает цикл, возвращаясь в исходное состояние
	}
	if (ifAns>0)
		return(1);
	else
		return(0);
}
int main()
{
	string regularExp;
	string ourWord;

	cin >> regularExp;
	cin >> ourWord;
	vector<vector<string>> ourStack = ParseSmart(regularExp);
	/*for (int i = 0; i < ourStack.size(); i++)
	{
	cout << '\n';
	for (int j = 0; j < ourStack[i].size(); j++)
	cout << ourStack[i][j] << ' ';
	}*/
	if (JustDoIt(ourStack, ourWord, 0, 0))
		cout << "YES";
	else
		cout << "NO";


	return(0);
}
