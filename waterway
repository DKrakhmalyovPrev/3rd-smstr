#define _CRT_SECURE_NO_WARNINGS
#include <iostream> 
#include <stdio.h>
#include <cstdlib>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <limits.h>
#include <string>
#include<map>
using namespace std;

/* Сука ёб вашу мать как же я заебался писать это дерьмо, я блять убивать готов из-за этой хуйни блять*/
class Fenwick
{
private:
	vector<vector<int>> ourMap;
	vector<vector<int>> RedRed;
	vector<vector<int>> RedGreen;
	vector<vector<int>> GreenRed;
	vector<vector<int>> GreenGreen;

public:
	Fenwick(){};

	Fenwick(vector<vector<int>>& x)
	{
		ourMap = x;
		vector<int> s(x[0].size(), 0);
		vector<vector<int>> ss(x.size(), s);
		RedRed = ss;
		RedGreen = ss;
		GreenGreen = ss;
		GreenRed = ss;
	}

	int G(int x)
	{
		if (x != 1)
			return(x&(x + 1));
		else
		return(1);
	}
	int R(int x)
	{
		return(x - (x&(x - 1)));
	}

	void DoRedRed()
	{
		
		for (int i = 1; i < ourMap.size(); i++)
		{
			for (int j = 1; j < ourMap[i].size(); j++)
			{
				int max = 0;
				for (int q = i - R(i); q < i; q++)
				for (int r = j - R(j); r < j; r++)
				if (ourMap[q][r]>max)
					max = ourMap[q][r];
				RedRed[i][j] = max;
			}
		}
	}
	
	void DoRedGreen()
	{
		for (int i = 1; i < ourMap.size(); i++)
		{
			for (int j = 1; j < ourMap[1].size(); j++)
			{
				int max = 0;
				for (int q = i - R(i); q < i; q++)
				for (int r = j; r < min(j + G(j)+1, (int)ourMap[i].size()); r++)
				if (ourMap[q][r]>max)
					max = ourMap[q][r];
				RedGreen[i][j] = max;
			}
		}
	}

	void DoGreenGreen()
	{
		
		for (int i = 1; i < ourMap.size(); i++)
		{
			for (int j = 1; j < ourMap[1].size(); j++)
			{
				int max = 0;
				for (int q = i; q < min(i + G(i) +1, (int)ourMap.size()); q++)
				for (int r = j; r < min(j + G(j) +1, (int)ourMap[i].size()); r++)
				if (r<ourMap[1].size() && q<ourMap.size())
				if (ourMap[q][r]>max)
					max = ourMap[q][r];
				GreenGreen[i][j] = max;
			}
		}
	}

	void DoGreenRed()
	{
		
		for (int i = 1; i < ourMap.size(); i++)
		{
			for (int j = 1; j < ourMap[1].size(); j++)
			{
				int max = 0;
				for (int q = i; q < min(i + G(i)+1, (int)ourMap.size()); q++)
				for (int r = j - R(j) ; r < j ; r++)
				if (ourMap[q][r]>max)
					max = ourMap[q][r];
				GreenRed[i][j] = max;
			}
		}
	}

	void ParceMyFuckingTree()
	{
		
		this->DoGreenGreen();
		this->DoGreenRed();
		this->DoRedGreen();
		this->DoRedRed();
		
	}

	int GG(int x1, int x2, int y1, int y2)
	{
		int max = 0;
		for (int cx = x1; cx < x2; cx += G(cx))
		for (int cy = y1; cy < y2; cy += G(cy))
			if (GreenGreen[cx][cy] > max)
				max = GreenGreen[cx][cy];
		return(max);
	}
	int GR(int x1, int x2, int y1, int y2)
	{
		int max = 0;
		for (int cx = x1; cx < x2; cx += G(cx))
		for (int cy = y2; cy > y1; cy -= R(cy))
			if (GreenRed[cx][cy] > max)
				max = GreenRed[cx][cy];
		return(max);
	}
	int RG(int x1, int x2, int y1, int y2)
	{
		int max = 0;
		for (int cx = x2; cx < x1; cx -= R(cx))
		for (int cy = y1; cy < y2; cy += G(cy))
			if (RedGreen[cx][cy] > max)
				max = RedGreen[cx][cy];
		return(max);
	}
	int RR(int x1, int x2, int y1, int y2)
	{
		int max = 0;
		for (int cx = x2; cx > x1; cx -= R(cx))
		for (int cy = y2; cy > y1; cy -= R(cy))
			if (RedRed[cx][cy] > max)
				max = RedRed[cx][cy];
		return(max);
	}
	int FindMax(int x1, int x2, int y1, int y2)
	{
		
		int m = 0;
		m = std::max(m, GG(x1, x2, y1, y2));
		m = std::max(m, GR(x1, x2, y1, y2));
		m = std::max(m, RG(x1, x2, y1, y2));
		m = std::max(m, RR(x1, x2, y1, y2));
		return(m);
	}
};

int main()
{
	int a, b;
	cin >>a>> b;
	vector<int> line(b+1, 0);
	vector<vector<int>> ourMap(a+1,line);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int x, y, z;
		cin >> x >> y >> z;
		ourMap[x][y] = z;
	}
	Fenwick ourTree(ourMap);
	ourTree.ParceMyFuckingTree();
	int x1, x2, y1, y2;
	cin >> x1 >> y1 >> x2 >> y2 ;
	cout << ourTree.FindMax(x1, x2, y1, y2);
	return(0);

}
